@using BlazeQuartz.Core.Enums
@using BlazeQuartz.Core.Models
@inject ISchedulerService SchSvc
@inject UserService UserService
@inject UserGroupService UserGroupService
@inject TaskAssignmentService TaskAssignmentService
@inject ISnackbar Snackbar
@inject AuthenticationStateProvider AuthenticationStateProvider
@using System.Security.Claims

<MudDialog>
    <DialogContent>
        <MudButtonGroup OverrideStyles="false" Class="pb-4">
            <MudButton Color="Color.Default" Size="Size.Large" DisableElevation="true"
                       Variant="@(SelectedTab == ScheduleDialogTab.Job ? Variant.Filled : Variant.Text)"
                       OnClick="() => OnSelectedTabChanged(ScheduleDialogTab.Job)">Job Details</MudButton>
            <MudButton Color="Color.Default" Size="Size.Large" DisableElevation="true"
                       Variant="@(SelectedTab == ScheduleDialogTab.Trigger ? Variant.Filled : Variant.Text)"
                       OnClick="() => OnSelectedTabChanged(ScheduleDialogTab.Trigger)">Trigger Details</MudButton>
        </MudButtonGroup>

        <MudText>Assign to</MudText>

        <MudRadioGroup T="string"
                       SelectedOptionChanged="OnAssignTypeChanged"
                       SelectedOption="_assignType"
                       Row="true">
            <MudRadio Option="@("User")">User</MudRadio>
            <MudRadio Option="@("Group")">Group</MudRadio>
        </MudRadioGroup>


        @if (_assignType == "User")
        {
            <MudSelect T="int"
                       @bind-Value="_selectedUserId"
                       Label="Select User"
                       Required="true"
                       RequiredError="User is required"
                       Margin="Margin.Dense"
                       AnchorOrigin="Origin.BottomCenter"
                       Variant="Variant.Outlined">
                <MudSelectItem Value="0">Select ...</MudSelectItem>
                @foreach (var user in users)
                {
                    <MudSelectItem Value="@user.UserId">@user.UserId - @user.Username</MudSelectItem>
                }
            </MudSelect>
        }
        else if (_assignType == "Group")
        {
            <MudSelect T="int"
                       @bind-Value="_selectedGroupId"
                       Label="Select Group"
                       Required="true"
                       RequiredError="Group is required"
                       Margin="Margin.Dense"
                       AnchorOrigin="Origin.BottomCenter"
                       Variant="Variant.Outlined">
                <MudSelectItem Value="0">Select ...</MudSelectItem>
                @foreach (var group in groups)
                {
                    <MudSelectItem Value="@group.ID">@group.ID - @group.GROUP_NAME</MudSelectItem>
                }
            </MudSelect>
        }


        @if (SelectedTab == ScheduleDialogTab.Job)
        {
            <BlazingJob @ref="_jobPanel" JobDetail="JobDetail" @bind-IsValid="_jobDetailIsValid"
                        IsReadOnly="IsReadOnlyJobDetail" />
        }
        else
        {
            <BlazingTrigger @ref="_triggerPanel" TriggerDetail="TriggerDetail" @bind-IsValid="_triggerDetailIsValid" />
        }
    </DialogContent>
    <DialogActions>
        <div class="d-flex justify-space-between flex-grow-1 pa-3">
            <MudButton OnClick="OnCancel" Variant="Variant.Filled"
                       Style="width: 100px;">Cancel</MudButton>
            <div class="d-flex gap-4">
                <MudButton @ref="_backBtn"
                           Style="width: 100px;"
                           Disabled="@(SelectedTab == ScheduleDialogTab.Job)"
                           Color="Color.Secondary"
                           StartIcon="@Icons.Material.Filled.NavigateBefore"
                           Variant="Variant.Filled"
                           OnClick="OnBack">Back</MudButton>
                <MudButton Color="Color.Primary"
                           Style="width: 100px;"
                           OnClick="OnSubmit"
                           EndIcon="@_nextIcon"
                           Variant="Variant.Filled">@_nextText</MudButton>
            </div>
        </div>


    </DialogActions>
</MudDialog>
@code {
    [CascadingParameter] MudDialogInstance MudDialog { get; set; } = null!;
    [Parameter] public JobDetailModel JobDetail { get; set; } = new();
    [Parameter] public TriggerDetailModel TriggerDetail { get; set; } = new();
    [Parameter] public TaskAssignment TaskAssignment { get; set; } = null!;
    [Parameter] public bool IsReadOnlyJobDetail { get; set; } = false;
    [Parameter] public ScheduleDialogTab SelectedTab { get; set; } = ScheduleDialogTab.Job;

    private bool _jobDetailIsValid;
    private bool _triggerDetailIsValid;

    private MudButton _backBtn = null!;
    private string _nextText = "Next";
    private string? _nextIcon = Icons.Material.Filled.NavigateNext;
    private string _assignType = "User";

    private BlazingJob _jobPanel = null!;
    private BlazingTrigger _triggerPanel = null!;
    private List<User> users = new();
    private List<UserGroup> groups = new();
    private int _selectedUserId;
    private int _selectedGroupId;
    private bool isAdmin;

    protected override async Task OnInitializedAsync()
    {
        try
        {
            var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
            var user = authState.User;
            var role = user.FindFirst(c => c.Type == ClaimTypes.Role)?.Value;
            isAdmin = role == UserRoles.Admin;

            if (SelectedTab == ScheduleDialogTab.Trigger)
            {
                _jobDetailIsValid = true;
                _nextText = "Save";
                _nextIcon = null;
            }

            if (TaskAssignment != null)
            {
                _assignType = TaskAssignment.USER_ID != 0 ? "User" : "Group";
            }

            if (_assignType == "User")
            {
                users = (await UserService.GetAllUsers()).ToList();
                _selectedUserId = TaskAssignment?.USER_ID ?? 0;
            }
            else if (_assignType == "Group")
            {
                groups = (await UserGroupService.GetAllGroups()).ToList();
                _selectedGroupId = TaskAssignment?.GROUP_ID ?? 0;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing ScheduleDialog: {ex.Message}");
            Snackbar.Add($"Error initializing dialog: {ex.Message}", Severity.Error);
        }
    }

    private async Task OnAssignTypeChanged(string value)
    {
        try
        {
            _assignType = value;

            if (_assignType == "User")
            {
                users = (await UserService.GetAllUsers()).ToList();
                _selectedGroupId = 0;
            }
            else if (_assignType == "Group")
            {
                groups = (await UserGroupService.GetAllGroups()).ToList();
                _selectedUserId = 0;
            }
        } catch (Exception ex)
        {
            Snackbar.Add($"Error changing assignment type: {ex.Message}", Severity.Error);
        }
    }
    private async Task OnSelectedTabChanged(ScheduleDialogTab tab)
    {
        if (SelectedTab == tab)
            return;

        // validate before change tab
        if (SelectedTab == ScheduleDialogTab.Job)
        {
            await _jobPanel.Validate();
            if (!_jobDetailIsValid)
                return;
        }

        SelectedTab = tab;

        // update text
        if (SelectedTab == ScheduleDialogTab.Job)
        {
            _nextText = "Next";
            _nextIcon = Icons.Material.Filled.NavigateNext;
        }
        else if (SelectedTab == ScheduleDialogTab.Trigger)
        {
            if (string.IsNullOrEmpty(TriggerDetail.Name) &&
                !string.IsNullOrEmpty(JobDetail.Name))
            {
                // use job name as trigger name when trigger name not yet specified
                // determine if trigger name can be used
                var exists = await SchSvc.ContainsTriggerKey(JobDetail.Name, TriggerDetail.Group);
                if (!exists)
                    TriggerDetail.Name = JobDetail.Name;
            }
            _nextText = "Save";
            _nextIcon = null;
        }
    }

    async Task OnBack()
    {
        await OnSelectedTabChanged(ScheduleDialogTab.Job);
    }

    async Task OnSubmit()
    {
        try
        {
            if (SelectedTab == ScheduleDialogTab.Job)
            {
                await OnSelectedTabChanged(ScheduleDialogTab.Trigger);
                return;
            }

            // Kiểm tra quyền admin trước khi thực hiện các thao tác
            if (!isAdmin)
            {
                Snackbar.Add("You don't have permission to perform this action.", Severity.Error);
                return;
            }

            await _triggerPanel.Validate();

            if (!_jobDetailIsValid || !_triggerDetailIsValid)
            {
                return;
            }

            if (_selectedUserId == 0 && _selectedGroupId == 0)
            {
                throw new Exception("Please select a user or group to assign the task.");
            }

            var taskAssignment = new TaskAssignment
            {
                JOB_NAME = JobDetail.Name,
                TRIGGER_NAME = TriggerDetail.Name,
                USER_ID = _selectedUserId,
                GROUP_ID = _selectedGroupId
            };

            // Nếu = null thì là đang thêm, != null là đang sửa
            if (TaskAssignment == null)
            {
                await TaskAssignmentService.AddTask(taskAssignment);
            }
            else
            {
                await TaskAssignmentService.UpdateTask(TaskAssignment.JOB_NAME, TaskAssignment.TRIGGER_NAME, taskAssignment);
            }

            MudDialog.Close(DialogResult.Ok((JobDetail, TriggerDetail)));
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Error: {ex.Message}", Severity.Error);
        }
    }

    void OnCancel() => MudDialog.Cancel();
}

